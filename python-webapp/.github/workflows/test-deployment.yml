name: Test Deployment Workflow

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Check formatting with black
      run: black --check .
    
    - name: Test with pytest
      run: |
        pytest --cov=app tests/
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: python-webapp:${{ github.sha }}
        outputs: type=docker,dest=/tmp/python-webapp-image.tar
    
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-webapp-image
        path: /tmp/python-webapp-image.tar
        retention-days: 1

  deploy-to-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: python-webapp-image
        path: /tmp
    
    - name: Load Docker image
      run: |
        docker load --input /tmp/python-webapp-image.tar
        docker tag python-webapp:${{ github.sha }} python-webapp:test
    
    - name: Set up test environment
      run: |
        # Create a network for the test environment
        docker network create test-network || true
        
        # Start PostgreSQL container
        docker run -d --name postgres-test \
          --network test-network \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=testdb \
          postgres:13
        
        # Wait for PostgreSQL to be ready
        sleep 10
    
    - name: Deploy to test environment
      run: |
        # Run the application in test mode
        docker run -d --name python-webapp-test \
          --network test-network \
          -p 8000:8000 \
          -e DB_URL=postgresql://postgres:postgres@postgres-test:5432/testdb \
          python-webapp:test
        
        # Wait for the application to start
        sleep 10
    
    - name: Test deployed application
      run: |
        # Simple health check
        curl -f http://localhost:8000/health || exit 1
        
        # Additional API tests can be added here
        echo "Deployment test successful!"
    
    - name: Create deployment summary
      run: |
        echo "## Test Deployment Info" >> $GITHUB_STEP_SUMMARY
        echo "* Image: python-webapp:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "* Deployed at: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "* Endpoint: http://localhost:8000" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify on success
      if: success()
      run: |
        echo "Test deployment successful!"
        # Add notification mechanism here (Slack, email, etc.)

  undeploy-from-test:
    needs: deploy-to-test
    runs-on: ubuntu-latest
    environment: test
    if: always()
    
    steps:
    - name: Undeploy from test environment
      run: |
        # Stop and remove the application container
        docker stop python-webapp-test || true
        docker rm python-webapp-test || true
        
        # Stop and remove the database container
        docker stop postgres-test || true
        docker rm postgres-test || true
        
        # Remove the network
        docker network rm test-network || true
    
    - name: Clean up Docker images
      run: |
        docker rmi python-webapp:test || true
        docker rmi python-webapp:${{ github.sha }} || true
    
    - name: Create undeployment summary
      run: |
        echo "## Test Undeployment Info" >> $GITHUB_STEP_SUMMARY
        echo "* Undeployed at: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "* Resources cleaned up: containers, network, and images" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify on completion
      if: always()
      run: |
        echo "Test environment cleanup completed!"
        # Add notification mechanism here (Slack, email, etc.)
